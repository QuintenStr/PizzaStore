// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaStore.Data;

#nullable disable

namespace PizzaStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230511111508_InitSeed")]
    partial class InitSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IngredientPizza", b =>
                {
                    b.Property<int>("IngredientsIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("PizzasPizzaId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsIngredientId", "PizzasPizzaId");

                    b.HasIndex("PizzasPizzaId");

                    b.ToTable("IngredientPizza", (string)null);

                    b.HasData(
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 1
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 1
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 2
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 2
                        },
                        new
                        {
                            IngredientsIngredientId = 3,
                            PizzasPizzaId = 2
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 3
                        },
                        new
                        {
                            IngredientsIngredientId = 5,
                            PizzasPizzaId = 3
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 4
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 4
                        },
                        new
                        {
                            IngredientsIngredientId = 4,
                            PizzasPizzaId = 4
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 5
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 5
                        },
                        new
                        {
                            IngredientsIngredientId = 3,
                            PizzasPizzaId = 5
                        },
                        new
                        {
                            IngredientsIngredientId = 5,
                            PizzasPizzaId = 5
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 6
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 6
                        },
                        new
                        {
                            IngredientsIngredientId = 3,
                            PizzasPizzaId = 6
                        },
                        new
                        {
                            IngredientsIngredientId = 8,
                            PizzasPizzaId = 6
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 7
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 7
                        },
                        new
                        {
                            IngredientsIngredientId = 9,
                            PizzasPizzaId = 7
                        },
                        new
                        {
                            IngredientsIngredientId = 10,
                            PizzasPizzaId = 7
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 8
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 8
                        },
                        new
                        {
                            IngredientsIngredientId = 11,
                            PizzasPizzaId = 8
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 9
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 9
                        },
                        new
                        {
                            IngredientsIngredientId = 12,
                            PizzasPizzaId = 9
                        },
                        new
                        {
                            IngredientsIngredientId = 1,
                            PizzasPizzaId = 10
                        },
                        new
                        {
                            IngredientsIngredientId = 2,
                            PizzasPizzaId = 10
                        },
                        new
                        {
                            IngredientsIngredientId = 7,
                            PizzasPizzaId = 10
                        },
                        new
                        {
                            IngredientsIngredientId = 13,
                            PizzasPizzaId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PizzaStore.Data.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Base"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Mozzarella"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Ham"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Salami"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Shrooms"
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Egg"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Onion"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Ananas"
                        },
                        new
                        {
                            IngredientId = 9,
                            Name = "Goat cheese"
                        },
                        new
                        {
                            IngredientId = 10,
                            Name = "Honey"
                        },
                        new
                        {
                            IngredientId = 11,
                            Name = "Salmon"
                        },
                        new
                        {
                            IngredientId = 12,
                            Name = "Parmaham"
                        },
                        new
                        {
                            IngredientId = 13,
                            Name = "Tuna"
                        });
                });

            modelBuilder.Entity("PizzaStore.Data.Pizza", b =>
                {
                    b.Property<int>("PizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PizzaId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("PizzaId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            PizzaId = 1,
                            Name = "Margherita",
                            Price = 9.0
                        },
                        new
                        {
                            PizzaId = 2,
                            Name = "Prosciutto",
                            Price = 11.5
                        },
                        new
                        {
                            PizzaId = 3,
                            Name = "Funghi",
                            Price = 11.0
                        },
                        new
                        {
                            PizzaId = 4,
                            Name = "Diavola",
                            Price = 12.0
                        },
                        new
                        {
                            PizzaId = 5,
                            Name = "Calzone",
                            Price = 12.99
                        },
                        new
                        {
                            PizzaId = 6,
                            Name = "Hawaï",
                            Price = 12.0
                        },
                        new
                        {
                            PizzaId = 7,
                            Name = "Goaty",
                            Price = 13.0
                        },
                        new
                        {
                            PizzaId = 8,
                            Name = "Salmony",
                            Price = 12.0
                        },
                        new
                        {
                            PizzaId = 9,
                            Name = "Al Parma",
                            Price = 13.0
                        },
                        new
                        {
                            PizzaId = 10,
                            Name = "Al Tonno",
                            Price = 12.0
                        });
                });

            modelBuilder.Entity("IngredientPizza", b =>
                {
                    b.HasOne("PizzaStore.Data.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaStore.Data.Pizza", null)
                        .WithMany()
                        .HasForeignKey("PizzasPizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
